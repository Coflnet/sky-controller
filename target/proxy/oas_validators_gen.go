// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/validate"
)

func (s Category) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	case 5:
		return nil
	case 6:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *Enchantment) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Type.Set {
			if err := func() error {
				if err := s.Type.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s EnchantmentType) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	case 5:
		return nil
	case 6:
		return nil
	case 7:
		return nil
	case 8:
		return nil
	case 9:
		return nil
	case 10:
		return nil
	case 11:
		return nil
	case 12:
		return nil
	case 13:
		return nil
	case 14:
		return nil
	case 15:
		return nil
	case 16:
		return nil
	case 17:
		return nil
	case 18:
		return nil
	case 19:
		return nil
	case 20:
		return nil
	case 21:
		return nil
	case 22:
		return nil
	case 23:
		return nil
	case 24:
		return nil
	case 25:
		return nil
	case 26:
		return nil
	case 27:
		return nil
	case 28:
		return nil
	case 29:
		return nil
	case 30:
		return nil
	case 31:
		return nil
	case 32:
		return nil
	case 33:
		return nil
	case 34:
		return nil
	case 35:
		return nil
	case 36:
		return nil
	case 37:
		return nil
	case 38:
		return nil
	case 39:
		return nil
	case 40:
		return nil
	case 41:
		return nil
	case 42:
		return nil
	case 43:
		return nil
	case 44:
		return nil
	case 45:
		return nil
	case 46:
		return nil
	case 47:
		return nil
	case 48:
		return nil
	case 49:
		return nil
	case 50:
		return nil
	case 51:
		return nil
	case 52:
		return nil
	case 53:
		return nil
	case 54:
		return nil
	case 55:
		return nil
	case 56:
		return nil
	case 57:
		return nil
	case 58:
		return nil
	case 60:
		return nil
	case 61:
		return nil
	case 62:
		return nil
	case 63:
		return nil
	case 64:
		return nil
	case 65:
		return nil
	case 66:
		return nil
	case 67:
		return nil
	case 68:
		return nil
	case 69:
		return nil
	case 70:
		return nil
	case 71:
		return nil
	case 72:
		return nil
	case 73:
		return nil
	case 74:
		return nil
	case 75:
		return nil
	case 76:
		return nil
	case 77:
		return nil
	case 78:
		return nil
	case 79:
		return nil
	case 80:
		return nil
	case 81:
		return nil
	case 82:
		return nil
	case 83:
		return nil
	case 84:
		return nil
	case 85:
		return nil
	case 86:
		return nil
	case 87:
		return nil
	case 88:
		return nil
	case 89:
		return nil
	case 90:
		return nil
	case 91:
		return nil
	case 92:
		return nil
	case 93:
		return nil
	case 94:
		return nil
	case 95:
		return nil
	case 96:
		return nil
	case 97:
		return nil
	case 98:
		return nil
	case 99:
		return nil
	case 100:
		return nil
	case 101:
		return nil
	case 102:
		return nil
	case 103:
		return nil
	case 104:
		return nil
	case 105:
		return nil
	case 106:
		return nil
	case 107:
		return nil
	case 108:
		return nil
	case 109:
		return nil
	case 110:
		return nil
	case 111:
		return nil
	case 112:
		return nil
	case 113:
		return nil
	case 114:
		return nil
	case 115:
		return nil
	case 116:
		return nil
	case 117:
		return nil
	case 118:
		return nil
	case 119:
		return nil
	case 120:
		return nil
	case 121:
		return nil
	case 122:
		return nil
	case 123:
		return nil
	case 126:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s Reforge) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	case 5:
		return nil
	case 6:
		return nil
	case 7:
		return nil
	case 8:
		return nil
	case 9:
		return nil
	case 10:
		return nil
	case 11:
		return nil
	case 12:
		return nil
	case 13:
		return nil
	case 14:
		return nil
	case 15:
		return nil
	case 16:
		return nil
	case 17:
		return nil
	case 18:
		return nil
	case 19:
		return nil
	case 20:
		return nil
	case 21:
		return nil
	case 22:
		return nil
	case 23:
		return nil
	case 24:
		return nil
	case 25:
		return nil
	case 26:
		return nil
	case 27:
		return nil
	case 28:
		return nil
	case 29:
		return nil
	case 30:
		return nil
	case 31:
		return nil
	case 32:
		return nil
	case 33:
		return nil
	case 34:
		return nil
	case 35:
		return nil
	case 36:
		return nil
	case 37:
		return nil
	case 38:
		return nil
	case 39:
		return nil
	case 40:
		return nil
	case 41:
		return nil
	case 42:
		return nil
	case 43:
		return nil
	case 44:
		return nil
	case 45:
		return nil
	case 46:
		return nil
	case 47:
		return nil
	case 48:
		return nil
	case 49:
		return nil
	case 50:
		return nil
	case 51:
		return nil
	case 52:
		return nil
	case 53:
		return nil
	case 54:
		return nil
	case 55:
		return nil
	case 56:
		return nil
	case 57:
		return nil
	case 58:
		return nil
	case 59:
		return nil
	case 60:
		return nil
	case 61:
		return nil
	case 62:
		return nil
	case 63:
		return nil
	case 64:
		return nil
	case 65:
		return nil
	case 66:
		return nil
	case 67:
		return nil
	case 68:
		return nil
	case 69:
		return nil
	case 70:
		return nil
	case 71:
		return nil
	case 72:
		return nil
	case 73:
		return nil
	case 74:
		return nil
	case 75:
		return nil
	case 76:
		return nil
	case 77:
		return nil
	case 78:
		return nil
	case 79:
		return nil
	case 80:
		return nil
	case 81:
		return nil
	case 82:
		return nil
	case 83:
		return nil
	case 84:
		return nil
	case 85:
		return nil
	case 86:
		return nil
	case 87:
		return nil
	case 88:
		return nil
	case 89:
		return nil
	case 90:
		return nil
	case 91:
		return nil
	case 92:
		return nil
	case 93:
		return nil
	case 94:
		return nil
	case 95:
		return nil
	case 96:
		return nil
	case 97:
		return nil
	case 98:
		return nil
	case 99:
		return nil
	case 100:
		return nil
	case 101:
		return nil
	case 102:
		return nil
	case 103:
		return nil
	case 104:
		return nil
	case 105:
		return nil
	case 106:
		return nil
	case 107:
		return nil
	case 108:
		return nil
	case 109:
		return nil
	case 110:
		return nil
	case 111:
		return nil
	case 112:
		return nil
	case 113:
		return nil
	case 114:
		return nil
	case 115:
		return nil
	case 116:
		return nil
	case 117:
		return nil
	case 118:
		return nil
	case 119:
		return nil
	case 120:
		return nil
	case 125:
		return nil
	case 126:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *SaveAuction) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Tag.Set {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    40,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(s.Tag.Value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tag",
			Error: err,
		})
	}
	if err := func() error {
		if s.ItemName.Set {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    45,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(s.ItemName.Value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "itemName",
			Error: err,
		})
	}
	if err := func() error {
		if s.Coop.Set {
			if err := func() error {
				if s.Coop.Value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "coop",
			Error: err,
		})
	}
	if err := func() error {
		if s.CoopMembers.Set {
			if err := func() error {
				if s.CoopMembers.Value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "coopMembers",
			Error: err,
		})
	}
	if err := func() error {
		if s.ClaimedBidders.Set {
			if err := func() error {
				if s.ClaimedBidders.Value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "claimedBidders",
			Error: err,
		})
	}
	if err := func() error {
		if s.ClaimedBids.Set {
			if err := func() error {
				if s.ClaimedBids.Value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "claimedBids",
			Error: err,
		})
	}
	if err := func() error {
		if s.Bids.Set {
			if err := func() error {
				if s.Bids.Value == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range s.Bids.Value {
					if err := func() error {
						if err := elem.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bids",
			Error: err,
		})
	}
	if err := func() error {
		if s.Enchantments.Set {
			if err := func() error {
				if s.Enchantments.Value == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range s.Enchantments.Value {
					if err := func() error {
						if err := elem.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "enchantments",
			Error: err,
		})
	}
	if err := func() error {
		if s.Reforge.Set {
			if err := func() error {
				if err := s.Reforge.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "reforge",
			Error: err,
		})
	}
	if err := func() error {
		if s.Category.Set {
			if err := func() error {
				if err := s.Category.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "category",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tier.Set {
			if err := func() error {
				if err := s.Tier.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tier",
			Error: err,
		})
	}
	if err := func() error {
		if s.NbtLookup.Set {
			if err := func() error {
				if s.NbtLookup.Value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "nbtLookup",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *SaveBids) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Auction.Set {
			if err := func() error {
				if err := s.Auction.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "auction",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s Tier) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	case 5:
		return nil
	case 6:
		return nil
	case 7:
		return nil
	case 8:
		return nil
	case 9:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
