// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
	}
	if prefix := s.cfg.Prefix; len(prefix) > 0 {
		if strings.HasPrefix(elem, prefix) {
			// Cut prefix from the path.
			elem = strings.TrimPrefix(elem, prefix)
		} else {
			// Prefix doesn't match.
			s.notFound(w, r)
			return
		}
	}
	if len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [1]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'A': // Prefix: "Api/time"
				if l := len("Api/time"); len(elem) >= l && elem[0:l] == "Api/time" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleAPITimeGetRequest([0]string{}, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
			case 'B': // Prefix: "Base/"
				if l := len("Base/"); len(elem) >= l && elem[0:l] == "Base/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "ah/"
					if l := len("ah/"); len(elem) >= l && elem[0:l] == "ah/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "playerId"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleBaseAhPlayerIdPostRequest([1]string{
								args[0],
							}, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}
				case 'k': // Prefix: "key"
					if l := len("key"); len(elem) >= l && elem[0:l] == "key" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "POST":
							s.handleBaseKeyPostRequest([0]string{}, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}
					switch elem[0] {
					case 's': // Prefix: "s/"
						if l := len("s/"); len(elem) >= l && elem[0:l] == "s/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "party"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/count"
							if l := len("/count"); len(elem) >= l && elem[0:l] == "/count" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleBaseKeysPartyCountGetRequest([1]string{
										args[0],
									}, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						}
					}
				}
			case 'P': // Prefix: "Proxy/hypixel"
				if l := len("Proxy/hypixel"); len(elem) >= l && elem[0:l] == "Proxy/hypixel" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleProxyHypixelGetRequest([0]string{}, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "ah/player/"
						if l := len("ah/player/"); len(elem) >= l && elem[0:l] == "ah/player/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "playerUuid"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleProxyHypixelAhPlayerPlayerUuidGetRequest([1]string{
									args[0],
								}, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
					case 's': // Prefix: "status"
						if l := len("status"); len(elem) >= l && elem[0:l] == "status" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleProxyHypixelStatusGetRequest([0]string{}, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
					}
				}
			case 's': // Prefix: "skyblock/auctions"
				if l := len("skyblock/auctions"); len(elem) >= l && elem[0:l] == "skyblock/auctions" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleSkyblockAuctionsGetRequest([0]string{}, w, r)
					case "POST":
						s.handleSkyblockAuctionsPostRequest([0]string{}, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
			}
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	operationID string
	pathPattern string
	count       int
	args        [1]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'A': // Prefix: "Api/time"
				if l := len("Api/time"); len(elem) >= l && elem[0:l] == "Api/time" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						// Leaf: APITimeGet
						r.name = "APITimeGet"
						r.operationID = ""
						r.pathPattern = "/Api/time"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
			case 'B': // Prefix: "Base/"
				if l := len("Base/"); len(elem) >= l && elem[0:l] == "Base/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "ah/"
					if l := len("ah/"); len(elem) >= l && elem[0:l] == "ah/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "playerId"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						switch method {
						case "POST":
							// Leaf: BaseAhPlayerIdPost
							r.name = "BaseAhPlayerIdPost"
							r.operationID = ""
							r.pathPattern = "/Base/ah/{playerId}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
				case 'k': // Prefix: "key"
					if l := len("key"); len(elem) >= l && elem[0:l] == "key" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "POST":
							r.name = "BaseKeyPost"
							r.operationID = ""
							r.pathPattern = "/Base/key"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case 's': // Prefix: "s/"
						if l := len("s/"); len(elem) >= l && elem[0:l] == "s/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "party"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/count"
							if l := len("/count"); len(elem) >= l && elem[0:l] == "/count" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: BaseKeysPartyCountGet
									r.name = "BaseKeysPartyCountGet"
									r.operationID = ""
									r.pathPattern = "/Base/keys/{party}/count"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						}
					}
				}
			case 'P': // Prefix: "Proxy/hypixel"
				if l := len("Proxy/hypixel"); len(elem) >= l && elem[0:l] == "Proxy/hypixel" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "ProxyHypixelGet"
						r.operationID = ""
						r.pathPattern = "/Proxy/hypixel"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "ah/player/"
						if l := len("ah/player/"); len(elem) >= l && elem[0:l] == "ah/player/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "playerUuid"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							switch method {
							case "GET":
								// Leaf: ProxyHypixelAhPlayerPlayerUuidGet
								r.name = "ProxyHypixelAhPlayerPlayerUuidGet"
								r.operationID = ""
								r.pathPattern = "/Proxy/hypixel/ah/player/{playerUuid}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
					case 's': // Prefix: "status"
						if l := len("status"); len(elem) >= l && elem[0:l] == "status" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								// Leaf: ProxyHypixelStatusGet
								r.name = "ProxyHypixelStatusGet"
								r.operationID = ""
								r.pathPattern = "/Proxy/hypixel/status"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					}
				}
			case 's': // Prefix: "skyblock/auctions"
				if l := len("skyblock/auctions"); len(elem) >= l && elem[0:l] == "skyblock/auctions" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						// Leaf: SkyblockAuctionsGet
						r.name = "SkyblockAuctionsGet"
						r.operationID = ""
						r.pathPattern = "/skyblock/auctions"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						// Leaf: SkyblockAuctionsPost
						r.name = "SkyblockAuctionsPost"
						r.operationID = ""
						r.pathPattern = "/skyblock/auctions"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
			}
		}
	}
	return r, false
}
