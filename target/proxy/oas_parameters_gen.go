// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// BaseAhPlayerIdPostParams is parameters of POST /Base/ah/{playerId} operation.
type BaseAhPlayerIdPostParams struct {
	PlayerId string
}

func unpackBaseAhPlayerIdPostParams(packed middleware.Parameters) (params BaseAhPlayerIdPostParams) {
	{
		key := middleware.ParameterKey{
			Name: "playerId",
			In:   "path",
		}
		params.PlayerId = packed[key].(string)
	}
	return params
}

func decodeBaseAhPlayerIdPostParams(args [1]string, r *http.Request) (params BaseAhPlayerIdPostParams, _ error) {
	// Decode path: playerId.
	if err := func() error {
		param, err := url.PathUnescape(args[0])
		if err != nil {
			return errors.Wrap(err, "unescape path")
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "playerId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PlayerId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "playerId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// BaseKeysPartyCountGetParams is parameters of GET /Base/keys/{party}/count operation.
type BaseKeysPartyCountGetParams struct {
	Party string
}

func unpackBaseKeysPartyCountGetParams(packed middleware.Parameters) (params BaseKeysPartyCountGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "party",
			In:   "path",
		}
		params.Party = packed[key].(string)
	}
	return params
}

func decodeBaseKeysPartyCountGetParams(args [1]string, r *http.Request) (params BaseKeysPartyCountGetParams, _ error) {
	// Decode path: party.
	if err := func() error {
		param, err := url.PathUnescape(args[0])
		if err != nil {
			return errors.Wrap(err, "unescape path")
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "party",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Party = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "party",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ProxyHypixelAhPlayerPlayerUuidGetParams is parameters of GET /Proxy/hypixel/ah/player/{playerUuid} operation.
type ProxyHypixelAhPlayerPlayerUuidGetParams struct {
	PlayerUuid string
	// Prefilter auctions to end in the future or less than x seconds ago, 0 is no limit (default).
	MaxAgeSeconds OptInt32
	// Identifer for whoever provided the hint.
	HintOwner OptString
}

func unpackProxyHypixelAhPlayerPlayerUuidGetParams(packed middleware.Parameters) (params ProxyHypixelAhPlayerPlayerUuidGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "playerUuid",
			In:   "path",
		}
		params.PlayerUuid = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "maxAgeSeconds",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.MaxAgeSeconds = v.(OptInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "hintOwner",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.HintOwner = v.(OptString)
		}
	}
	return params
}

func decodeProxyHypixelAhPlayerPlayerUuidGetParams(args [1]string, r *http.Request) (params ProxyHypixelAhPlayerPlayerUuidGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: playerUuid.
	if err := func() error {
		param, err := url.PathUnescape(args[0])
		if err != nil {
			return errors.Wrap(err, "unescape path")
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "playerUuid",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PlayerUuid = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "playerUuid",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for query: maxAgeSeconds.
	{
		val := int32(0)
		params.MaxAgeSeconds.SetTo(val)
	}
	// Decode query: maxAgeSeconds.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "maxAgeSeconds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotMaxAgeSecondsVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotMaxAgeSecondsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.MaxAgeSeconds.SetTo(paramsDotMaxAgeSecondsVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "maxAgeSeconds",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: hintOwner.
	{
		val := string("xReborn")
		params.HintOwner.SetTo(val)
	}
	// Decode query: hintOwner.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "hintOwner",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotHintOwnerVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotHintOwnerVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.HintOwner.SetTo(paramsDotHintOwnerVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "hintOwner",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ProxyHypixelGetParams is parameters of GET /Proxy/hypixel operation.
type ProxyHypixelGetParams struct {
	Path OptString
}

func unpackProxyHypixelGetParams(packed middleware.Parameters) (params ProxyHypixelGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "path",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Path = v.(OptString)
		}
	}
	return params
}

func decodeProxyHypixelGetParams(args [0]string, r *http.Request) (params ProxyHypixelGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: path.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "path",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPathVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPathVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Path.SetTo(paramsDotPathVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "path",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
