// Code generated by ogen, DO NOT EDIT.

package api

import (
	"io"
	"time"

	"github.com/go-faster/jx"
)

// BaseAhPlayerIdPostOK is response for BaseAhPlayerIdPost operation.
type BaseAhPlayerIdPostOK struct{}

// BaseKeyPostOK is response for BaseKeyPost operation.
type BaseKeyPostOK struct{}

// Ref: #/components/schemas/Category
type Category int32

const (
	Category0 Category = 0
	Category1 Category = 1
	Category2 Category = 2
	Category3 Category = 3
	Category4 Category = 4
	Category5 Category = 5
	Category6 Category = 6
)

// Ref: #/components/schemas/Enchantment
type Enchantment struct {
	ID            OptInt32           `json:"id"`
	Type          OptEnchantmentType `json:"type"`
	Level         OptInt32           `json:"level"`
	ItemType      OptInt32           `json:"itemType"`
	SaveAuctionId OptInt32           `json:"saveAuctionId"`
}

// GetID returns the value of ID.
func (s *Enchantment) GetID() OptInt32 {
	return s.ID
}

// GetType returns the value of Type.
func (s *Enchantment) GetType() OptEnchantmentType {
	return s.Type
}

// GetLevel returns the value of Level.
func (s *Enchantment) GetLevel() OptInt32 {
	return s.Level
}

// GetItemType returns the value of ItemType.
func (s *Enchantment) GetItemType() OptInt32 {
	return s.ItemType
}

// GetSaveAuctionId returns the value of SaveAuctionId.
func (s *Enchantment) GetSaveAuctionId() OptInt32 {
	return s.SaveAuctionId
}

// SetID sets the value of ID.
func (s *Enchantment) SetID(val OptInt32) {
	s.ID = val
}

// SetType sets the value of Type.
func (s *Enchantment) SetType(val OptEnchantmentType) {
	s.Type = val
}

// SetLevel sets the value of Level.
func (s *Enchantment) SetLevel(val OptInt32) {
	s.Level = val
}

// SetItemType sets the value of ItemType.
func (s *Enchantment) SetItemType(val OptInt32) {
	s.ItemType = val
}

// SetSaveAuctionId sets the value of SaveAuctionId.
func (s *Enchantment) SetSaveAuctionId(val OptInt32) {
	s.SaveAuctionId = val
}

// Ref: #/components/schemas/EnchantmentType
type EnchantmentType int32

const (
	EnchantmentType0   EnchantmentType = 0
	EnchantmentType1   EnchantmentType = 1
	EnchantmentType2   EnchantmentType = 2
	EnchantmentType3   EnchantmentType = 3
	EnchantmentType4   EnchantmentType = 4
	EnchantmentType5   EnchantmentType = 5
	EnchantmentType6   EnchantmentType = 6
	EnchantmentType7   EnchantmentType = 7
	EnchantmentType8   EnchantmentType = 8
	EnchantmentType9   EnchantmentType = 9
	EnchantmentType10  EnchantmentType = 10
	EnchantmentType11  EnchantmentType = 11
	EnchantmentType12  EnchantmentType = 12
	EnchantmentType13  EnchantmentType = 13
	EnchantmentType14  EnchantmentType = 14
	EnchantmentType15  EnchantmentType = 15
	EnchantmentType16  EnchantmentType = 16
	EnchantmentType17  EnchantmentType = 17
	EnchantmentType18  EnchantmentType = 18
	EnchantmentType19  EnchantmentType = 19
	EnchantmentType20  EnchantmentType = 20
	EnchantmentType21  EnchantmentType = 21
	EnchantmentType22  EnchantmentType = 22
	EnchantmentType23  EnchantmentType = 23
	EnchantmentType24  EnchantmentType = 24
	EnchantmentType25  EnchantmentType = 25
	EnchantmentType26  EnchantmentType = 26
	EnchantmentType27  EnchantmentType = 27
	EnchantmentType28  EnchantmentType = 28
	EnchantmentType29  EnchantmentType = 29
	EnchantmentType30  EnchantmentType = 30
	EnchantmentType31  EnchantmentType = 31
	EnchantmentType32  EnchantmentType = 32
	EnchantmentType33  EnchantmentType = 33
	EnchantmentType34  EnchantmentType = 34
	EnchantmentType35  EnchantmentType = 35
	EnchantmentType36  EnchantmentType = 36
	EnchantmentType37  EnchantmentType = 37
	EnchantmentType38  EnchantmentType = 38
	EnchantmentType39  EnchantmentType = 39
	EnchantmentType40  EnchantmentType = 40
	EnchantmentType41  EnchantmentType = 41
	EnchantmentType42  EnchantmentType = 42
	EnchantmentType43  EnchantmentType = 43
	EnchantmentType44  EnchantmentType = 44
	EnchantmentType45  EnchantmentType = 45
	EnchantmentType46  EnchantmentType = 46
	EnchantmentType47  EnchantmentType = 47
	EnchantmentType48  EnchantmentType = 48
	EnchantmentType49  EnchantmentType = 49
	EnchantmentType50  EnchantmentType = 50
	EnchantmentType51  EnchantmentType = 51
	EnchantmentType52  EnchantmentType = 52
	EnchantmentType53  EnchantmentType = 53
	EnchantmentType54  EnchantmentType = 54
	EnchantmentType55  EnchantmentType = 55
	EnchantmentType56  EnchantmentType = 56
	EnchantmentType57  EnchantmentType = 57
	EnchantmentType58  EnchantmentType = 58
	EnchantmentType60  EnchantmentType = 60
	EnchantmentType61  EnchantmentType = 61
	EnchantmentType62  EnchantmentType = 62
	EnchantmentType63  EnchantmentType = 63
	EnchantmentType64  EnchantmentType = 64
	EnchantmentType65  EnchantmentType = 65
	EnchantmentType66  EnchantmentType = 66
	EnchantmentType67  EnchantmentType = 67
	EnchantmentType68  EnchantmentType = 68
	EnchantmentType69  EnchantmentType = 69
	EnchantmentType70  EnchantmentType = 70
	EnchantmentType71  EnchantmentType = 71
	EnchantmentType72  EnchantmentType = 72
	EnchantmentType73  EnchantmentType = 73
	EnchantmentType74  EnchantmentType = 74
	EnchantmentType75  EnchantmentType = 75
	EnchantmentType76  EnchantmentType = 76
	EnchantmentType77  EnchantmentType = 77
	EnchantmentType78  EnchantmentType = 78
	EnchantmentType79  EnchantmentType = 79
	EnchantmentType80  EnchantmentType = 80
	EnchantmentType81  EnchantmentType = 81
	EnchantmentType82  EnchantmentType = 82
	EnchantmentType83  EnchantmentType = 83
	EnchantmentType84  EnchantmentType = 84
	EnchantmentType85  EnchantmentType = 85
	EnchantmentType86  EnchantmentType = 86
	EnchantmentType87  EnchantmentType = 87
	EnchantmentType88  EnchantmentType = 88
	EnchantmentType89  EnchantmentType = 89
	EnchantmentType90  EnchantmentType = 90
	EnchantmentType91  EnchantmentType = 91
	EnchantmentType92  EnchantmentType = 92
	EnchantmentType93  EnchantmentType = 93
	EnchantmentType94  EnchantmentType = 94
	EnchantmentType95  EnchantmentType = 95
	EnchantmentType96  EnchantmentType = 96
	EnchantmentType97  EnchantmentType = 97
	EnchantmentType98  EnchantmentType = 98
	EnchantmentType99  EnchantmentType = 99
	EnchantmentType100 EnchantmentType = 100
	EnchantmentType101 EnchantmentType = 101
	EnchantmentType102 EnchantmentType = 102
	EnchantmentType103 EnchantmentType = 103
	EnchantmentType104 EnchantmentType = 104
	EnchantmentType105 EnchantmentType = 105
	EnchantmentType106 EnchantmentType = 106
	EnchantmentType107 EnchantmentType = 107
	EnchantmentType108 EnchantmentType = 108
	EnchantmentType109 EnchantmentType = 109
	EnchantmentType110 EnchantmentType = 110
	EnchantmentType111 EnchantmentType = 111
	EnchantmentType112 EnchantmentType = 112
	EnchantmentType113 EnchantmentType = 113
	EnchantmentType114 EnchantmentType = 114
	EnchantmentType115 EnchantmentType = 115
	EnchantmentType116 EnchantmentType = 116
	EnchantmentType117 EnchantmentType = 117
	EnchantmentType118 EnchantmentType = 118
	EnchantmentType119 EnchantmentType = 119
	EnchantmentType120 EnchantmentType = 120
	EnchantmentType121 EnchantmentType = 121
	EnchantmentType122 EnchantmentType = 122
	EnchantmentType123 EnchantmentType = 123
	EnchantmentType126 EnchantmentType = 126
)

// Ref: #/components/schemas/KeyCreate
type KeyCreate struct {
	Party OptNilString `json:"party"`
	Key   OptNilString `json:"key"`
	Owner OptNilString `json:"owner"`
}

// GetParty returns the value of Party.
func (s *KeyCreate) GetParty() OptNilString {
	return s.Party
}

// GetKey returns the value of Key.
func (s *KeyCreate) GetKey() OptNilString {
	return s.Key
}

// GetOwner returns the value of Owner.
func (s *KeyCreate) GetOwner() OptNilString {
	return s.Owner
}

// SetParty sets the value of Party.
func (s *KeyCreate) SetParty(val OptNilString) {
	s.Party = val
}

// SetKey sets the value of Key.
func (s *KeyCreate) SetKey(val OptNilString) {
	s.Key = val
}

// SetOwner sets the value of Owner.
func (s *KeyCreate) SetOwner(val OptNilString) {
	s.Owner = val
}

// Ref: #/components/schemas/NBTLookup
type NBTLookup struct {
	AuctionId OptInt32 `json:"auctionId"`
	KeyId     OptInt32 `json:"keyId"`
	Value     OptInt64 `json:"value"`
}

// GetAuctionId returns the value of AuctionId.
func (s *NBTLookup) GetAuctionId() OptInt32 {
	return s.AuctionId
}

// GetKeyId returns the value of KeyId.
func (s *NBTLookup) GetKeyId() OptInt32 {
	return s.KeyId
}

// GetValue returns the value of Value.
func (s *NBTLookup) GetValue() OptInt64 {
	return s.Value
}

// SetAuctionId sets the value of AuctionId.
func (s *NBTLookup) SetAuctionId(val OptInt32) {
	s.AuctionId = val
}

// SetKeyId sets the value of KeyId.
func (s *NBTLookup) SetKeyId(val OptInt32) {
	s.KeyId = val
}

// SetValue sets the value of Value.
func (s *NBTLookup) SetValue(val OptInt64) {
	s.Value = val
}

// Ref: #/components/schemas/NbtData
type NbtData struct {
	ID   OptInt32          `json:"id"`
	Data OptNilNbtDataData `json:"data"`
}

// GetID returns the value of ID.
func (s *NbtData) GetID() OptInt32 {
	return s.ID
}

// GetData returns the value of Data.
func (s *NbtData) GetData() OptNilNbtDataData {
	return s.Data
}

// SetID sets the value of ID.
func (s *NbtData) SetID(val OptInt32) {
	s.ID = val
}

// SetData sets the value of Data.
func (s *NbtData) SetData(val OptNilNbtDataData) {
	s.Data = val
}

type NbtDataData map[string]jx.Raw

func (s *NbtDataData) init() NbtDataData {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCategory returns new OptCategory with value set to v.
func NewOptCategory(v Category) OptCategory {
	return OptCategory{
		Value: v,
		Set:   true,
	}
}

// OptCategory is optional Category.
type OptCategory struct {
	Value Category
	Set   bool
}

// IsSet returns true if OptCategory was set.
func (o OptCategory) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCategory) Reset() {
	var v Category
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCategory) SetTo(v Category) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCategory) Get() (v Category, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCategory) Or(d Category) Category {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEnchantmentType returns new OptEnchantmentType with value set to v.
func NewOptEnchantmentType(v EnchantmentType) OptEnchantmentType {
	return OptEnchantmentType{
		Value: v,
		Set:   true,
	}
}

// OptEnchantmentType is optional EnchantmentType.
type OptEnchantmentType struct {
	Value EnchantmentType
	Set   bool
}

// IsSet returns true if OptEnchantmentType was set.
func (o OptEnchantmentType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEnchantmentType) Reset() {
	var v EnchantmentType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEnchantmentType) SetTo(v EnchantmentType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEnchantmentType) Get() (v EnchantmentType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEnchantmentType) Or(d EnchantmentType) EnchantmentType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNbtData returns new OptNbtData with value set to v.
func NewOptNbtData(v NbtData) OptNbtData {
	return OptNbtData{
		Value: v,
		Set:   true,
	}
}

// OptNbtData is optional NbtData.
type OptNbtData struct {
	Value NbtData
	Set   bool
}

// IsSet returns true if OptNbtData was set.
func (o OptNbtData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNbtData) Reset() {
	var v NbtData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNbtData) SetTo(v NbtData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNbtData) Get() (v NbtData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNbtData) Or(d NbtData) NbtData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilAnyArray returns new OptNilAnyArray with value set to v.
func NewOptNilAnyArray(v []jx.Raw) OptNilAnyArray {
	return OptNilAnyArray{
		Value: v,
		Set:   true,
	}
}

// OptNilAnyArray is optional nullable []jx.Raw.
type OptNilAnyArray struct {
	Value []jx.Raw
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilAnyArray was set.
func (o OptNilAnyArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilAnyArray) Reset() {
	var v []jx.Raw
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilAnyArray) SetTo(v []jx.Raw) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilAnyArray) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilAnyArray) Get() (v []jx.Raw, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilAnyArray) Or(d []jx.Raw) []jx.Raw {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilEnchantmentArray returns new OptNilEnchantmentArray with value set to v.
func NewOptNilEnchantmentArray(v []Enchantment) OptNilEnchantmentArray {
	return OptNilEnchantmentArray{
		Value: v,
		Set:   true,
	}
}

// OptNilEnchantmentArray is optional nullable []Enchantment.
type OptNilEnchantmentArray struct {
	Value []Enchantment
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilEnchantmentArray was set.
func (o OptNilEnchantmentArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilEnchantmentArray) Reset() {
	var v []Enchantment
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilEnchantmentArray) SetTo(v []Enchantment) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilEnchantmentArray) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilEnchantmentArray) Get() (v []Enchantment, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilEnchantmentArray) Or(d []Enchantment) []Enchantment {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilNBTLookupArray returns new OptNilNBTLookupArray with value set to v.
func NewOptNilNBTLookupArray(v []NBTLookup) OptNilNBTLookupArray {
	return OptNilNBTLookupArray{
		Value: v,
		Set:   true,
	}
}

// OptNilNBTLookupArray is optional nullable []NBTLookup.
type OptNilNBTLookupArray struct {
	Value []NBTLookup
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilNBTLookupArray was set.
func (o OptNilNBTLookupArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilNBTLookupArray) Reset() {
	var v []NBTLookup
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilNBTLookupArray) SetTo(v []NBTLookup) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilNBTLookupArray) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilNBTLookupArray) Get() (v []NBTLookup, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilNBTLookupArray) Or(d []NBTLookup) []NBTLookup {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilNbtDataData returns new OptNilNbtDataData with value set to v.
func NewOptNilNbtDataData(v NbtDataData) OptNilNbtDataData {
	return OptNilNbtDataData{
		Value: v,
		Set:   true,
	}
}

// OptNilNbtDataData is optional nullable NbtDataData.
type OptNilNbtDataData struct {
	Value NbtDataData
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilNbtDataData was set.
func (o OptNilNbtDataData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilNbtDataData) Reset() {
	var v NbtDataData
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilNbtDataData) SetTo(v NbtDataData) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilNbtDataData) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilNbtDataData) Get() (v NbtDataData, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilNbtDataData) Or(d NbtDataData) NbtDataData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilSaveAuctionContext returns new OptNilSaveAuctionContext with value set to v.
func NewOptNilSaveAuctionContext(v SaveAuctionContext) OptNilSaveAuctionContext {
	return OptNilSaveAuctionContext{
		Value: v,
		Set:   true,
	}
}

// OptNilSaveAuctionContext is optional nullable SaveAuctionContext.
type OptNilSaveAuctionContext struct {
	Value SaveAuctionContext
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilSaveAuctionContext was set.
func (o OptNilSaveAuctionContext) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilSaveAuctionContext) Reset() {
	var v SaveAuctionContext
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilSaveAuctionContext) SetTo(v SaveAuctionContext) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilSaveAuctionContext) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilSaveAuctionContext) Get() (v SaveAuctionContext, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilSaveAuctionContext) Or(d SaveAuctionContext) SaveAuctionContext {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilSaveAuctionFlatNbt returns new OptNilSaveAuctionFlatNbt with value set to v.
func NewOptNilSaveAuctionFlatNbt(v SaveAuctionFlatNbt) OptNilSaveAuctionFlatNbt {
	return OptNilSaveAuctionFlatNbt{
		Value: v,
		Set:   true,
	}
}

// OptNilSaveAuctionFlatNbt is optional nullable SaveAuctionFlatNbt.
type OptNilSaveAuctionFlatNbt struct {
	Value SaveAuctionFlatNbt
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilSaveAuctionFlatNbt was set.
func (o OptNilSaveAuctionFlatNbt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilSaveAuctionFlatNbt) Reset() {
	var v SaveAuctionFlatNbt
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilSaveAuctionFlatNbt) SetTo(v SaveAuctionFlatNbt) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilSaveAuctionFlatNbt) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilSaveAuctionFlatNbt) Get() (v SaveAuctionFlatNbt, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilSaveAuctionFlatNbt) Or(d SaveAuctionFlatNbt) SaveAuctionFlatNbt {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilSaveAuctionTraceContext returns new OptNilSaveAuctionTraceContext with value set to v.
func NewOptNilSaveAuctionTraceContext(v SaveAuctionTraceContext) OptNilSaveAuctionTraceContext {
	return OptNilSaveAuctionTraceContext{
		Value: v,
		Set:   true,
	}
}

// OptNilSaveAuctionTraceContext is optional nullable SaveAuctionTraceContext.
type OptNilSaveAuctionTraceContext struct {
	Value SaveAuctionTraceContext
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilSaveAuctionTraceContext was set.
func (o OptNilSaveAuctionTraceContext) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilSaveAuctionTraceContext) Reset() {
	var v SaveAuctionTraceContext
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilSaveAuctionTraceContext) SetTo(v SaveAuctionTraceContext) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilSaveAuctionTraceContext) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilSaveAuctionTraceContext) Get() (v SaveAuctionTraceContext, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilSaveAuctionTraceContext) Or(d SaveAuctionTraceContext) SaveAuctionTraceContext {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilSaveBidsArray returns new OptNilSaveBidsArray with value set to v.
func NewOptNilSaveBidsArray(v []SaveBids) OptNilSaveBidsArray {
	return OptNilSaveBidsArray{
		Value: v,
		Set:   true,
	}
}

// OptNilSaveBidsArray is optional nullable []SaveBids.
type OptNilSaveBidsArray struct {
	Value []SaveBids
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilSaveBidsArray was set.
func (o OptNilSaveBidsArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilSaveBidsArray) Reset() {
	var v []SaveBids
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilSaveBidsArray) SetTo(v []SaveBids) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilSaveBidsArray) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilSaveBidsArray) Get() (v []SaveBids, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilSaveBidsArray) Or(d []SaveBids) []SaveBids {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilString returns new OptNilString with value set to v.
func NewOptNilString(v string) OptNilString {
	return OptNilString{
		Value: v,
		Set:   true,
	}
}

// OptNilString is optional nullable string.
type OptNilString struct {
	Value string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilString was set.
func (o OptNilString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilString) Reset() {
	var v string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilString) SetTo(v string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilString) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStringArray returns new OptNilStringArray with value set to v.
func NewOptNilStringArray(v []string) OptNilStringArray {
	return OptNilStringArray{
		Value: v,
		Set:   true,
	}
}

// OptNilStringArray is optional nullable []string.
type OptNilStringArray struct {
	Value []string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStringArray was set.
func (o OptNilStringArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStringArray) Reset() {
	var v []string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStringArray) SetTo(v []string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStringArray) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStringArray) Get() (v []string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStringArray) Or(d []string) []string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilUUIDArray returns new OptNilUUIDArray with value set to v.
func NewOptNilUUIDArray(v []UUID) OptNilUUIDArray {
	return OptNilUUIDArray{
		Value: v,
		Set:   true,
	}
}

// OptNilUUIDArray is optional nullable []UUID.
type OptNilUUIDArray struct {
	Value []UUID
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilUUIDArray was set.
func (o OptNilUUIDArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilUUIDArray) Reset() {
	var v []UUID
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilUUIDArray) SetTo(v []UUID) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilUUIDArray) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilUUIDArray) Get() (v []UUID, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilUUIDArray) Or(d []UUID) []UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReforge returns new OptReforge with value set to v.
func NewOptReforge(v Reforge) OptReforge {
	return OptReforge{
		Value: v,
		Set:   true,
	}
}

// OptReforge is optional Reforge.
type OptReforge struct {
	Value Reforge
	Set   bool
}

// IsSet returns true if OptReforge was set.
func (o OptReforge) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReforge) Reset() {
	var v Reforge
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReforge) SetTo(v Reforge) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReforge) Get() (v Reforge, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReforge) Or(d Reforge) Reforge {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSaveAuction returns new OptSaveAuction with value set to v.
func NewOptSaveAuction(v SaveAuction) OptSaveAuction {
	return OptSaveAuction{
		Value: v,
		Set:   true,
	}
}

// OptSaveAuction is optional SaveAuction.
type OptSaveAuction struct {
	Value SaveAuction
	Set   bool
}

// IsSet returns true if OptSaveAuction was set.
func (o OptSaveAuction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSaveAuction) Reset() {
	var v SaveAuction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSaveAuction) SetTo(v SaveAuction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSaveAuction) Get() (v SaveAuction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSaveAuction) Or(d SaveAuction) SaveAuction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTier returns new OptTier with value set to v.
func NewOptTier(v Tier) OptTier {
	return OptTier{
		Value: v,
		Set:   true,
	}
}

// OptTier is optional Tier.
type OptTier struct {
	Value Tier
	Set   bool
}

// IsSet returns true if OptTier was set.
func (o OptTier) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTier) Reset() {
	var v Tier
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTier) SetTo(v Tier) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTier) Get() (v Tier, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTier) Or(d Tier) Tier {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type ProxyHypixelGetOKApplicationJSON string

func (*ProxyHypixelGetOKApplicationJSON) proxyHypixelGetRes() {}

type ProxyHypixelGetOKTextJSON struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ProxyHypixelGetOKTextJSON) Read(p []byte) (n int, err error) {
	return s.Data.Read(p)
}

func (*ProxyHypixelGetOKTextJSON) proxyHypixelGetRes() {}

type ProxyHypixelGetOKTextPlain struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ProxyHypixelGetOKTextPlain) Read(p []byte) (n int, err error) {
	return s.Data.Read(p)
}

func (*ProxyHypixelGetOKTextPlain) proxyHypixelGetRes() {}

// ProxyHypixelStatusGetOK is response for ProxyHypixelStatusGet operation.
type ProxyHypixelStatusGetOK struct{}

// Ref: #/components/schemas/Reforge
type Reforge int32

const (
	Reforge0   Reforge = 0
	Reforge1   Reforge = 1
	Reforge2   Reforge = 2
	Reforge3   Reforge = 3
	Reforge4   Reforge = 4
	Reforge5   Reforge = 5
	Reforge6   Reforge = 6
	Reforge7   Reforge = 7
	Reforge8   Reforge = 8
	Reforge9   Reforge = 9
	Reforge10  Reforge = 10
	Reforge11  Reforge = 11
	Reforge12  Reforge = 12
	Reforge13  Reforge = 13
	Reforge14  Reforge = 14
	Reforge15  Reforge = 15
	Reforge16  Reforge = 16
	Reforge17  Reforge = 17
	Reforge18  Reforge = 18
	Reforge19  Reforge = 19
	Reforge20  Reforge = 20
	Reforge21  Reforge = 21
	Reforge22  Reforge = 22
	Reforge23  Reforge = 23
	Reforge24  Reforge = 24
	Reforge25  Reforge = 25
	Reforge26  Reforge = 26
	Reforge27  Reforge = 27
	Reforge28  Reforge = 28
	Reforge29  Reforge = 29
	Reforge30  Reforge = 30
	Reforge31  Reforge = 31
	Reforge32  Reforge = 32
	Reforge33  Reforge = 33
	Reforge34  Reforge = 34
	Reforge35  Reforge = 35
	Reforge36  Reforge = 36
	Reforge37  Reforge = 37
	Reforge38  Reforge = 38
	Reforge39  Reforge = 39
	Reforge40  Reforge = 40
	Reforge41  Reforge = 41
	Reforge42  Reforge = 42
	Reforge43  Reforge = 43
	Reforge44  Reforge = 44
	Reforge45  Reforge = 45
	Reforge46  Reforge = 46
	Reforge47  Reforge = 47
	Reforge48  Reforge = 48
	Reforge49  Reforge = 49
	Reforge50  Reforge = 50
	Reforge51  Reforge = 51
	Reforge52  Reforge = 52
	Reforge53  Reforge = 53
	Reforge54  Reforge = 54
	Reforge55  Reforge = 55
	Reforge56  Reforge = 56
	Reforge57  Reforge = 57
	Reforge58  Reforge = 58
	Reforge59  Reforge = 59
	Reforge60  Reforge = 60
	Reforge61  Reforge = 61
	Reforge62  Reforge = 62
	Reforge63  Reforge = 63
	Reforge64  Reforge = 64
	Reforge65  Reforge = 65
	Reforge66  Reforge = 66
	Reforge67  Reforge = 67
	Reforge68  Reforge = 68
	Reforge69  Reforge = 69
	Reforge70  Reforge = 70
	Reforge71  Reforge = 71
	Reforge72  Reforge = 72
	Reforge73  Reforge = 73
	Reforge74  Reforge = 74
	Reforge75  Reforge = 75
	Reforge76  Reforge = 76
	Reforge77  Reforge = 77
	Reforge78  Reforge = 78
	Reforge79  Reforge = 79
	Reforge80  Reforge = 80
	Reforge81  Reforge = 81
	Reforge82  Reforge = 82
	Reforge83  Reforge = 83
	Reforge84  Reforge = 84
	Reforge85  Reforge = 85
	Reforge86  Reforge = 86
	Reforge87  Reforge = 87
	Reforge88  Reforge = 88
	Reforge89  Reforge = 89
	Reforge90  Reforge = 90
	Reforge91  Reforge = 91
	Reforge92  Reforge = 92
	Reforge93  Reforge = 93
	Reforge94  Reforge = 94
	Reforge95  Reforge = 95
	Reforge96  Reforge = 96
	Reforge97  Reforge = 97
	Reforge98  Reforge = 98
	Reforge99  Reforge = 99
	Reforge100 Reforge = 100
	Reforge101 Reforge = 101
	Reforge102 Reforge = 102
	Reforge103 Reforge = 103
	Reforge104 Reforge = 104
	Reforge105 Reforge = 105
	Reforge106 Reforge = 106
	Reforge107 Reforge = 107
	Reforge108 Reforge = 108
	Reforge109 Reforge = 109
	Reforge110 Reforge = 110
	Reforge111 Reforge = 111
	Reforge112 Reforge = 112
	Reforge113 Reforge = 113
	Reforge114 Reforge = 114
	Reforge115 Reforge = 115
	Reforge116 Reforge = 116
	Reforge117 Reforge = 117
	Reforge118 Reforge = 118
	Reforge119 Reforge = 119
	Reforge120 Reforge = 120
	Reforge125 Reforge = 125
	Reforge126 Reforge = 126
)

// Ref: #/components/schemas/SaveAuction
type SaveAuction struct {
	ID               OptInt32                      `json:"id"`
	UUID             OptNilString                  `json:"uuid"`
	Claimed          OptBool                       `json:"claimed"`
	Count            OptInt32                      `json:"count"`
	StartingBid      OptInt64                      `json:"startingBid"`
	OldTier          OptNilString                  `json:"oldTier"`
	OldCategory      OptNilString                  `json:"oldCategory"`
	Tag              OptNilString                  `json:"tag"`
	ItemName         OptNilString                  `json:"itemName"`
	Start            OptDateTime                   `json:"start"`
	End              OptDateTime                   `json:"end"`
	AuctioneerId     OptNilString                  `json:"auctioneerId"`
	ProfileId        OptNilString                  `json:"profileId"`
	Coop             OptNilStringArray             `json:"coop"`
	CoopMembers      OptNilUUIDArray               `json:"coopMembers"`
	ClaimedBidders   OptNilAnyArray                `json:"claimedBidders"`
	ClaimedBids      OptNilUUIDArray               `json:"claimedBids"`
	HighestBidAmount OptInt64                      `json:"highestBidAmount"`
	Bids             OptNilSaveBidsArray           `json:"bids"`
	AnvilUses        OptInt32                      `json:"anvilUses"`
	Enchantments     OptNilEnchantmentArray        `json:"enchantments"`
	NbtData          OptNbtData                    `json:"nbtData"`
	ItemCreatedAt    OptDateTime                   `json:"itemCreatedAt"`
	Reforge          OptReforge                    `json:"reforge"`
	Category         OptCategory                   `json:"category"`
	Tier             OptTier                       `json:"tier"`
	Bin              OptBool                       `json:"bin"`
	SellerId         OptInt32                      `json:"sellerId"`
	ItemId           OptInt32                      `json:"itemId"`
	NbtLookup        OptNilNBTLookupArray          `json:"nbtLookup"`
	FlatNbt          OptNilSaveAuctionFlatNbt      `json:"flatNbt"`
	UID              OptInt64                      `json:"uId"`
	FindTime         OptDateTime                   `json:"findTime"`
	TraceContext     OptNilSaveAuctionTraceContext `json:"traceContext"`
	Context          OptNilSaveAuctionContext      `json:"context"`
}

// GetID returns the value of ID.
func (s *SaveAuction) GetID() OptInt32 {
	return s.ID
}

// GetUUID returns the value of UUID.
func (s *SaveAuction) GetUUID() OptNilString {
	return s.UUID
}

// GetClaimed returns the value of Claimed.
func (s *SaveAuction) GetClaimed() OptBool {
	return s.Claimed
}

// GetCount returns the value of Count.
func (s *SaveAuction) GetCount() OptInt32 {
	return s.Count
}

// GetStartingBid returns the value of StartingBid.
func (s *SaveAuction) GetStartingBid() OptInt64 {
	return s.StartingBid
}

// GetOldTier returns the value of OldTier.
func (s *SaveAuction) GetOldTier() OptNilString {
	return s.OldTier
}

// GetOldCategory returns the value of OldCategory.
func (s *SaveAuction) GetOldCategory() OptNilString {
	return s.OldCategory
}

// GetTag returns the value of Tag.
func (s *SaveAuction) GetTag() OptNilString {
	return s.Tag
}

// GetItemName returns the value of ItemName.
func (s *SaveAuction) GetItemName() OptNilString {
	return s.ItemName
}

// GetStart returns the value of Start.
func (s *SaveAuction) GetStart() OptDateTime {
	return s.Start
}

// GetEnd returns the value of End.
func (s *SaveAuction) GetEnd() OptDateTime {
	return s.End
}

// GetAuctioneerId returns the value of AuctioneerId.
func (s *SaveAuction) GetAuctioneerId() OptNilString {
	return s.AuctioneerId
}

// GetProfileId returns the value of ProfileId.
func (s *SaveAuction) GetProfileId() OptNilString {
	return s.ProfileId
}

// GetCoop returns the value of Coop.
func (s *SaveAuction) GetCoop() OptNilStringArray {
	return s.Coop
}

// GetCoopMembers returns the value of CoopMembers.
func (s *SaveAuction) GetCoopMembers() OptNilUUIDArray {
	return s.CoopMembers
}

// GetClaimedBidders returns the value of ClaimedBidders.
func (s *SaveAuction) GetClaimedBidders() OptNilAnyArray {
	return s.ClaimedBidders
}

// GetClaimedBids returns the value of ClaimedBids.
func (s *SaveAuction) GetClaimedBids() OptNilUUIDArray {
	return s.ClaimedBids
}

// GetHighestBidAmount returns the value of HighestBidAmount.
func (s *SaveAuction) GetHighestBidAmount() OptInt64 {
	return s.HighestBidAmount
}

// GetBids returns the value of Bids.
func (s *SaveAuction) GetBids() OptNilSaveBidsArray {
	return s.Bids
}

// GetAnvilUses returns the value of AnvilUses.
func (s *SaveAuction) GetAnvilUses() OptInt32 {
	return s.AnvilUses
}

// GetEnchantments returns the value of Enchantments.
func (s *SaveAuction) GetEnchantments() OptNilEnchantmentArray {
	return s.Enchantments
}

// GetNbtData returns the value of NbtData.
func (s *SaveAuction) GetNbtData() OptNbtData {
	return s.NbtData
}

// GetItemCreatedAt returns the value of ItemCreatedAt.
func (s *SaveAuction) GetItemCreatedAt() OptDateTime {
	return s.ItemCreatedAt
}

// GetReforge returns the value of Reforge.
func (s *SaveAuction) GetReforge() OptReforge {
	return s.Reforge
}

// GetCategory returns the value of Category.
func (s *SaveAuction) GetCategory() OptCategory {
	return s.Category
}

// GetTier returns the value of Tier.
func (s *SaveAuction) GetTier() OptTier {
	return s.Tier
}

// GetBin returns the value of Bin.
func (s *SaveAuction) GetBin() OptBool {
	return s.Bin
}

// GetSellerId returns the value of SellerId.
func (s *SaveAuction) GetSellerId() OptInt32 {
	return s.SellerId
}

// GetItemId returns the value of ItemId.
func (s *SaveAuction) GetItemId() OptInt32 {
	return s.ItemId
}

// GetNbtLookup returns the value of NbtLookup.
func (s *SaveAuction) GetNbtLookup() OptNilNBTLookupArray {
	return s.NbtLookup
}

// GetFlatNbt returns the value of FlatNbt.
func (s *SaveAuction) GetFlatNbt() OptNilSaveAuctionFlatNbt {
	return s.FlatNbt
}

// GetUID returns the value of UID.
func (s *SaveAuction) GetUID() OptInt64 {
	return s.UID
}

// GetFindTime returns the value of FindTime.
func (s *SaveAuction) GetFindTime() OptDateTime {
	return s.FindTime
}

// GetTraceContext returns the value of TraceContext.
func (s *SaveAuction) GetTraceContext() OptNilSaveAuctionTraceContext {
	return s.TraceContext
}

// GetContext returns the value of Context.
func (s *SaveAuction) GetContext() OptNilSaveAuctionContext {
	return s.Context
}

// SetID sets the value of ID.
func (s *SaveAuction) SetID(val OptInt32) {
	s.ID = val
}

// SetUUID sets the value of UUID.
func (s *SaveAuction) SetUUID(val OptNilString) {
	s.UUID = val
}

// SetClaimed sets the value of Claimed.
func (s *SaveAuction) SetClaimed(val OptBool) {
	s.Claimed = val
}

// SetCount sets the value of Count.
func (s *SaveAuction) SetCount(val OptInt32) {
	s.Count = val
}

// SetStartingBid sets the value of StartingBid.
func (s *SaveAuction) SetStartingBid(val OptInt64) {
	s.StartingBid = val
}

// SetOldTier sets the value of OldTier.
func (s *SaveAuction) SetOldTier(val OptNilString) {
	s.OldTier = val
}

// SetOldCategory sets the value of OldCategory.
func (s *SaveAuction) SetOldCategory(val OptNilString) {
	s.OldCategory = val
}

// SetTag sets the value of Tag.
func (s *SaveAuction) SetTag(val OptNilString) {
	s.Tag = val
}

// SetItemName sets the value of ItemName.
func (s *SaveAuction) SetItemName(val OptNilString) {
	s.ItemName = val
}

// SetStart sets the value of Start.
func (s *SaveAuction) SetStart(val OptDateTime) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *SaveAuction) SetEnd(val OptDateTime) {
	s.End = val
}

// SetAuctioneerId sets the value of AuctioneerId.
func (s *SaveAuction) SetAuctioneerId(val OptNilString) {
	s.AuctioneerId = val
}

// SetProfileId sets the value of ProfileId.
func (s *SaveAuction) SetProfileId(val OptNilString) {
	s.ProfileId = val
}

// SetCoop sets the value of Coop.
func (s *SaveAuction) SetCoop(val OptNilStringArray) {
	s.Coop = val
}

// SetCoopMembers sets the value of CoopMembers.
func (s *SaveAuction) SetCoopMembers(val OptNilUUIDArray) {
	s.CoopMembers = val
}

// SetClaimedBidders sets the value of ClaimedBidders.
func (s *SaveAuction) SetClaimedBidders(val OptNilAnyArray) {
	s.ClaimedBidders = val
}

// SetClaimedBids sets the value of ClaimedBids.
func (s *SaveAuction) SetClaimedBids(val OptNilUUIDArray) {
	s.ClaimedBids = val
}

// SetHighestBidAmount sets the value of HighestBidAmount.
func (s *SaveAuction) SetHighestBidAmount(val OptInt64) {
	s.HighestBidAmount = val
}

// SetBids sets the value of Bids.
func (s *SaveAuction) SetBids(val OptNilSaveBidsArray) {
	s.Bids = val
}

// SetAnvilUses sets the value of AnvilUses.
func (s *SaveAuction) SetAnvilUses(val OptInt32) {
	s.AnvilUses = val
}

// SetEnchantments sets the value of Enchantments.
func (s *SaveAuction) SetEnchantments(val OptNilEnchantmentArray) {
	s.Enchantments = val
}

// SetNbtData sets the value of NbtData.
func (s *SaveAuction) SetNbtData(val OptNbtData) {
	s.NbtData = val
}

// SetItemCreatedAt sets the value of ItemCreatedAt.
func (s *SaveAuction) SetItemCreatedAt(val OptDateTime) {
	s.ItemCreatedAt = val
}

// SetReforge sets the value of Reforge.
func (s *SaveAuction) SetReforge(val OptReforge) {
	s.Reforge = val
}

// SetCategory sets the value of Category.
func (s *SaveAuction) SetCategory(val OptCategory) {
	s.Category = val
}

// SetTier sets the value of Tier.
func (s *SaveAuction) SetTier(val OptTier) {
	s.Tier = val
}

// SetBin sets the value of Bin.
func (s *SaveAuction) SetBin(val OptBool) {
	s.Bin = val
}

// SetSellerId sets the value of SellerId.
func (s *SaveAuction) SetSellerId(val OptInt32) {
	s.SellerId = val
}

// SetItemId sets the value of ItemId.
func (s *SaveAuction) SetItemId(val OptInt32) {
	s.ItemId = val
}

// SetNbtLookup sets the value of NbtLookup.
func (s *SaveAuction) SetNbtLookup(val OptNilNBTLookupArray) {
	s.NbtLookup = val
}

// SetFlatNbt sets the value of FlatNbt.
func (s *SaveAuction) SetFlatNbt(val OptNilSaveAuctionFlatNbt) {
	s.FlatNbt = val
}

// SetUID sets the value of UID.
func (s *SaveAuction) SetUID(val OptInt64) {
	s.UID = val
}

// SetFindTime sets the value of FindTime.
func (s *SaveAuction) SetFindTime(val OptDateTime) {
	s.FindTime = val
}

// SetTraceContext sets the value of TraceContext.
func (s *SaveAuction) SetTraceContext(val OptNilSaveAuctionTraceContext) {
	s.TraceContext = val
}

// SetContext sets the value of Context.
func (s *SaveAuction) SetContext(val OptNilSaveAuctionContext) {
	s.Context = val
}

type SaveAuctionContext map[string]string

func (s *SaveAuctionContext) init() SaveAuctionContext {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type SaveAuctionFlatNbt map[string]string

func (s *SaveAuctionFlatNbt) init() SaveAuctionFlatNbt {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type SaveAuctionTraceContext map[string]string

func (s *SaveAuctionTraceContext) init() SaveAuctionTraceContext {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/SaveBids
type SaveBids struct {
	ID        OptInt32       `json:"id"`
	Auction   OptSaveAuction `json:"auction"`
	Bidder    OptNilString   `json:"bidder"`
	ProfileId OptNilString   `json:"profileId"`
	Amount    OptInt64       `json:"amount"`
	Timestamp OptDateTime    `json:"timestamp"`
	BidderId  OptInt32       `json:"bidderId"`
}

// GetID returns the value of ID.
func (s *SaveBids) GetID() OptInt32 {
	return s.ID
}

// GetAuction returns the value of Auction.
func (s *SaveBids) GetAuction() OptSaveAuction {
	return s.Auction
}

// GetBidder returns the value of Bidder.
func (s *SaveBids) GetBidder() OptNilString {
	return s.Bidder
}

// GetProfileId returns the value of ProfileId.
func (s *SaveBids) GetProfileId() OptNilString {
	return s.ProfileId
}

// GetAmount returns the value of Amount.
func (s *SaveBids) GetAmount() OptInt64 {
	return s.Amount
}

// GetTimestamp returns the value of Timestamp.
func (s *SaveBids) GetTimestamp() OptDateTime {
	return s.Timestamp
}

// GetBidderId returns the value of BidderId.
func (s *SaveBids) GetBidderId() OptInt32 {
	return s.BidderId
}

// SetID sets the value of ID.
func (s *SaveBids) SetID(val OptInt32) {
	s.ID = val
}

// SetAuction sets the value of Auction.
func (s *SaveBids) SetAuction(val OptSaveAuction) {
	s.Auction = val
}

// SetBidder sets the value of Bidder.
func (s *SaveBids) SetBidder(val OptNilString) {
	s.Bidder = val
}

// SetProfileId sets the value of ProfileId.
func (s *SaveBids) SetProfileId(val OptNilString) {
	s.ProfileId = val
}

// SetAmount sets the value of Amount.
func (s *SaveBids) SetAmount(val OptInt64) {
	s.Amount = val
}

// SetTimestamp sets the value of Timestamp.
func (s *SaveBids) SetTimestamp(val OptDateTime) {
	s.Timestamp = val
}

// SetBidderId sets the value of BidderId.
func (s *SaveBids) SetBidderId(val OptInt32) {
	s.BidderId = val
}

type SkyblockAuctionsGetOKApplicationJSON string

func (*SkyblockAuctionsGetOKApplicationJSON) skyblockAuctionsGetRes() {}

type SkyblockAuctionsGetOKTextJSON struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s SkyblockAuctionsGetOKTextJSON) Read(p []byte) (n int, err error) {
	return s.Data.Read(p)
}

func (*SkyblockAuctionsGetOKTextJSON) skyblockAuctionsGetRes() {}

type SkyblockAuctionsGetOKTextPlain struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s SkyblockAuctionsGetOKTextPlain) Read(p []byte) (n int, err error) {
	return s.Data.Read(p)
}

func (*SkyblockAuctionsGetOKTextPlain) skyblockAuctionsGetRes() {}

type SkyblockAuctionsPostOKApplicationJSON string

func (*SkyblockAuctionsPostOKApplicationJSON) skyblockAuctionsPostRes() {}

type SkyblockAuctionsPostOKTextJSON struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s SkyblockAuctionsPostOKTextJSON) Read(p []byte) (n int, err error) {
	return s.Data.Read(p)
}

func (*SkyblockAuctionsPostOKTextJSON) skyblockAuctionsPostRes() {}

type SkyblockAuctionsPostOKTextPlain struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s SkyblockAuctionsPostOKTextPlain) Read(p []byte) (n int, err error) {
	return s.Data.Read(p)
}

func (*SkyblockAuctionsPostOKTextPlain) skyblockAuctionsPostRes() {}

// Ref: #/components/schemas/Tier
type Tier int32

const (
	Tier0 Tier = 0
	Tier1 Tier = 1
	Tier2 Tier = 2
	Tier3 Tier = 3
	Tier4 Tier = 4
	Tier5 Tier = 5
	Tier6 Tier = 6
	Tier7 Tier = 7
	Tier8 Tier = 8
	Tier9 Tier = 9
)

// Ref: #/components/schemas/UuId
type UUID struct {
	ID    OptInt32     `json:"id"`
	Value OptNilString `json:"value"`
}

// GetID returns the value of ID.
func (s *UUID) GetID() OptInt32 {
	return s.ID
}

// GetValue returns the value of Value.
func (s *UUID) GetValue() OptNilString {
	return s.Value
}

// SetID sets the value of ID.
func (s *UUID) SetID(val OptInt32) {
	s.ID = val
}

// SetValue sets the value of Value.
func (s *UUID) SetValue(val OptNilString) {
	s.Value = val
}
